rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function hasListAccess(listId) {
      return isSignedIn() && (
        request.auth.uid == get(/databases/$(database)/documents/lists/$(listId)).data.ownerId ||
        request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.sharedWith
      );
    }
    
    function canEditList(listId) {
      let list = get(/databases/$(database)/documents/lists/$(listId)).data;
      let sharedUser = list.sharedUsers[request.auth.uid];
      return isSignedIn() && (
        request.auth.uid == list.ownerId ||
        (sharedUser != null && sharedUser.permission == 'edit')
      );
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId);
      
      // User's private data (FCM tokens, settings)
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Contacts - users can only access their own contacts
    match /contacts/{userId}/userContacts/{contactId} {
      allow read, write: if isOwner(userId);
    }
    
    // Lists - access based on ownership and sharing
    match /lists/{listId} {
      allow read: if hasListAccess(listId);
      allow create: if isSignedIn();
      allow update: if canEditList(listId);
      allow delete: if isSignedIn() && 
        request.auth.uid == resource.data.ownerId;
      
      // List items - inherit list permissions
      match /items/{itemId} {
        allow read: if hasListAccess(listId);
        allow write: if canEditList(listId);
      }
      
      // List messages - read access same as list, write if has access
      match /messages/{messageId} {
        allow read: if hasListAccess(listId);
        allow create: if hasListAccess(listId) && 
          request.auth.uid == request.resource.data.senderId;
        allow update, delete: if isSignedIn() && 
          request.auth.uid == resource.data.senderId;
      }
      
      // List activity log
      match /activity/{activityId} {
        allow read: if hasListAccess(listId);
        allow create: if hasListAccess(listId);
        allow update, delete: if false; // Activity is immutable
      }
    }
    
    // Templates - users can read public templates or their own
    match /templates/{templateId} {
      allow read: if resource.data.isPublic == true || 
        isOwner(resource.data.creatorId);
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data.creatorId);
    }
    
    // Notifications - users can only access their own
    match /notifications/{userId}/userNotifications/{notificationId} {
      allow read, write: if isOwner(userId);
    }
    
    // Invitations - both sender and recipient can read
    match /invitations/{invitationId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        request.auth.uid == resource.data.recipientId;
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId
      );
    }
    
    // AI request logs (for monitoring/debugging)
    match /ai_logs/{logId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }
    
    // Block all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
