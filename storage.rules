rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidAudioFile() {
      return request.resource.contentType.matches('audio/.*');
    }
    
    function isFileSizeValid(maxSizeMB) {
      return request.resource.size <= maxSizeMB * 1024 * 1024;
    }
    
    // Avatar uploads - restricted to owning user
    match /avatars/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                     isValidImageFile() && 
                     isFileSizeValid(5);
      allow delete: if isOwner(userId);
    }
    
    // Audio uploads - restricted to owning user
    match /audio/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
                     isValidAudioFile() && 
                     isFileSizeValid(10);
      allow delete: if isOwner(userId);
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
